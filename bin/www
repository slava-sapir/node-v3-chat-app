#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chat-app:server');
const { generateMessage, generateLocationMessage } = require('../src/utils/messages')
const { addUser, removeUser, getUser, getUsersInRoom } = require('../src/utils/user')
//var http = require('http');
/**
 * Create HTTP server.
 */

//var server = http.createServer(app);

const server = require('http').createServer(app);
const io = require('socket.io')(server)
const Filter = require('bad-words')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

//Get connection with socket io
//socket.emit(for spacific user), io.emit(for everybody), socket.broadcast.emit(for everybody except given user)
//io.to('').emit(for everybody in a specific room), 
//socket.broadcast.to('').emit(for everybody except given user in a spacific chat room)


io.on('connection', (socket) => {
    
    //  socket.on('join', ({ username, room}, callback) => {
    //  const { error, user} = addUser({id: socket.id, username, room})
    //we also can distructer arguments above - username and room
     socket.on('join', ( options, callback) => {
     const { error, user} = addUser({id: socket.id, ...options})
 
     if(error){
       return callback(error)
     }

     socket.join(user.room)

     socket.emit('message', generateMessage(`Wellcome ${user.username}!`, 'Sys-Admin'))
     socket.broadcast.to(user.room).emit('message', generateMessage(`${user.username} just joined us!`, 'Sys-Admin'))
     io.to(user.room).emit('roomData', { 
      room: user.room,
      users: getUsersInRoom(user.room)
      })
       callback()
   })

    socket.on('sendMessage', (message, callback) => {
      const filter = new Filter()
      const user = getUser(socket.id)
      if(!user){
        return callback('Please sign up again!')
      }
      if(filter.isProfane(message.message)){
          return callback('Profanity not allowed!')
      }
      
      io.to(user.room).emit('message', generateMessage(`${message.message}`, user.username))
       callback()  
    })

    socket.on('sendLocation', (coords, callback) => {
      if(!coords){
        return callback('Location is not avalable!')
      }
      const url = `http://google.com/maps?q=${coords.latitude},${coords.longitude}`
      const user = getUser(socket.id)
      io.to(user.room).emit('location-sharing', generateLocationMessage('This is my location', url, user.username))
     // `http://google.com/maps?q=${coords.latitude},${coords.longitude}`)

      callback()
    })

    socket.on('disconnect', () => {
      const user = removeUser(socket.id)

       if(user){
        io.to(user.room).emit('message',  generateMessage(`${user.username} just has left...`, 'Sys-Admin'))
        io.to(user.room).emit('roomData', {
        room: user.room,
        users: getUsersInRoom(user.room)
        })
       }
    })
  })


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
console.log('Server is up on port ' + port)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
